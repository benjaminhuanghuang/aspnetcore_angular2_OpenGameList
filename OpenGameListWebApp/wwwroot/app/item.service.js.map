{"version":3,"sources":["item.service.ts"],"names":["core_1","require","http_1","ItemService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","getMostViewed","getRandom","id","Error","res","handleError","error","console","__decorate","Injectable","Http","exports"],"mappings":"8pBAAA,IAAAA,QAAAC,QAAA,iBACAC,OAAAD,QAAA,gBAEAA,SAAA,wBAKA,IAAaE,aAAW,WAIpB,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAFZC,KAAAC,QAAU,aAsCtB,MAjCIH,aAAAI,UAAAC,UAAA,SAAUC,KAEN,GAAIC,KAAML,KAAKC,QAAU,YAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAC,UAAY,MAAAA,UAASC,UAGvDX,YAAAI,UAAAQ,cAAA,SAAcN,KAEV,GAAIC,KAAML,KAAKC,QAAU,gBAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAC,UAAY,MAAAA,UAASC,UAGvDX,YAAAI,UAAAS,UAAA,SAAUP,KAEN,GAAIC,KAAML,KAAKC,QAAU,YAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAC,UAAY,MAAAA,UAASC,UAGvDX,YAAAI,UAAAI,IAAA,SAAIM,IAEA,GAAU,MAANA,GAAc,KAAM,IAAIC,OAAM,kBAClC,IAAIR,KAAML,KAAKC,QAAUW,EACzB,OAAOZ,MAAKD,KAAKO,IAAID,KAAKE,IAAI,SAAAO,KAAO,MAAMA,KAAIL,UAE3CX,YAAAI,UAAAa,YAAR,SAAoBC,OAGhBC,QAAQD,MAAMA,QAGtBlB,cAxCaA,aAAWoB,YADvBvB,OAAAwB,6CAK6BtB,OAAAuB,QAJjBtB,aAAAuB,QAAAvB,YAAAA","file":"item.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport {Observable} from \"rxjs/Observable\";\nimport 'rxjs/add/operator/map';\n\nimport {Item} from \"./item\";\n\n@Injectable()\nexport class ItemService \n{\n    private baseUrl = \"api/items/\"; // web api URL\n    \n    constructor(private http: Http) \n    { }\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.\n    getLatest(num?: number) \n    {\n        var url = this.baseUrl + \"GetLatest/\";\n        if (num != null) { url += num; }\n        return this.http.get(url).map(response => response.json());\n    }\n    // calls the [GET] /api/items/GetMostViewed/{n} Web API method to retrieve the most viewed items.\n    getMostViewed(num?: number) \n    {\n        var url = this.baseUrl + \"GetMostViewed/\";\n        if (num != null) { url += num; }\n        return this.http.get(url).map(response => response.json());\n    }\n    // calls the [GET] /api/items/GetRandom/{n} Web API method to retrieve n random items.\n    getRandom(num?: number) \n    {\n        var url = this.baseUrl + \"GetRandom/\";\n        if (num != null) { url += num; }\n        return this.http.get(url).map(response => response.json());\n    }\n    // calls the [GET] /api/items/{id} Web API method to retrieve the item with the given id.\n    get(id: number) \n    {\n        if (id == null) { throw new Error(\"id is required.\"); }\n        var url = this.baseUrl + id;\n        return this.http.get(url).map(res => <Item>res.json());\n    }\n    private handleError(error: Response) \n    {\n        // output errors to the console.\n        console.error(error);\n        //return Observable.throw(error.json().error || \"Server error\");\n    }\n}"]}